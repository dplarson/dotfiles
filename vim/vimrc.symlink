"--------------------------------------------------------------
" GENERAL SETTINGS
"--------------------------------------------------------------
set nocompatible
set nobackup
set noswapfile
set encoding=utf-8

" disable beep and flash
set noeb vb t_vb=

" required
filetype off  " required

" set shell
set shell=/bin/sh

" allow backspace to delete
set backspace=indent,eol,start

" prevent Vim from removing scrollback buffer.
" http://www.shallowsky.com/linux/noaltscreen.html
set t_ti= t_te=

" ignore files
set wildignore+=*/tmp/*,*.so,*.swp,*.zip,*.pyc,*.m~,*.o.DSYM*
set wildignore+=*.aux
set wildignore+=*.jpg,*.jpeg,*.png,*.gif,*.pdf

"--------------------------------------------------------------
" UI
"--------------------------------------------------------------
set cursorline
set incsearch
set number
set ruler

" hint to keep lines short
if exists('+colorcolumn')
  set colorcolumn=80
endif

" mouse
if has('mouse')
  set mouse=a
  set mousemodel=popup_setpos
  set mousehide
endif


"--------------------------------------------------------------
" TEXT FORMATTING
"--------------------------------------------------------------
" ts = tabstop
" sts = softtabstop
" sw = shiftwidth
" et = expandtab

set tabstop=4
set softtabstop=4
set shiftwidth=4

set expandtab
set nosmarttab
set nofoldenable

" per file extension
autocmd BufRead,BufNewFile *.sh,*.zsh,*.symlink set filetype=sh
autocmd BufRead,BufNewFile *.tex set filetype=tex

" per file type
au FileType sh setlocal ts=2 sts=2 sw=2
au FileType html setlocal ts=2 sts=2 sw=2
au FileType ruby setlocal ts=2 sts=2 sw=2


"--------------------------------------------------------------
" GUI SPECIFIC SETTINGS
"--------------------------------------------------------------
syntax on

" colors
set background=dark
let g:solarized_termtrans=1
let g:solarized_termcolors=16
let g:solarized_contrast="high"
let g:solarized_visibility="high"
colorscheme solarized

" font
set guifont=Inconsolata:h14

" MacVim specific settings
if has ("gui_macvim")
  set fuoptions=maxhorz,maxvert   " fullscreen
  set visualbell                  " no beep
  set guioptions-=T               " start with no toolbar
endif


"--------------------------------------------------------------
" COMMAND REMAPPING
"--------------------------------------------------------------
let mapleader=","
let maplocalleader=","

" copy/paste to global register (i.e. system clipboard)
map <leader>y "*y
map <leader>p "*p
map <leader>P "*P

" switch between last two files
nnoremap <leader><leader> <c-^>

" faster file functions
nnoremap ; :

" clear search buffer
nmap <silent> <leader>/ :nohlsearch<CR>

" sane movement with wrap turned on
nnoremap j gj
nnoremap k gk
vnoremap j gj
vnoremap k gk
nnoremap <Down> gj
nnoremap <Up> gk
vnoremap <Down> gj
vnoremap <Up> gk
inoremap <Down> <C-o>gj
inoremap <Up> <C-o>gk

" strip whitespace
function! StripWhitespace ()
  exec ':%s/ \+$//gc'
endfunction
map <leader><space> :call StripWhitespace()<CR>

"--------------------------------------------------------------
" PLUGINS
"--------------------------------------------------------------
set rtp+=~/.vim/bundle/vundle/
call vundle#rc()

" let Vundle manage Vundle (required)
Bundle 'gmarik/vundle'

" LaTeX
Bundle "lervag/vimtex"
let g:vimtex_view_general_viewer = '/Applications/Skim.app/Contents/SharedSupport/displayline'
let g:vimtex_view_general_options = '-r @line @pdf @tex'
let g:vimtex_compiler_latexmk = {}
let g:vimtex_compiler_latexmk.callback = 0  " disable callback (which requires vim with +clientserver)


" This adds a callback hook that updates Skim after compilation
let g:vimtex_latexmk_callback_hooks = ['UpdateSkim']
function! UpdateSkim(status)
  if !a:status | return | endif

  let l:out = b:vimtex.out()
  let l:tex = expand('%:p')
  let l:cmd = [g:vimtex_view_general_viewer, '-r']
  if !empty(system('pgrep Skim'))
    call extend(l:cmd, ['-g'])
  endif
  if has('nvim')
    call jobstart(l:cmd + [line('.'), l:out, l:tex])
  elseif has('job')
    call job_start(l:cmd + [line('.'), l:out, l:tex])
  else
    call system(join(l:cmd + [line('.'), shellescape(l:out), shellescape(l:tex)], ' '))
  endif
endfunction

" Markdown
Bundle "Markdown"
au BufRead,BufNewFile *.mk,*.markdown set filetype=markdown

" Puppet
Bundle "rodjek/vim-puppet"
au BufRead,BufNewFile *.pp set filetype=puppet

" Go (only run on OSX machines)
Bundle "fatih/vim-go"
au BufRead,BufNewFile *.go set filetype=go

" Julia
Bundle 'JuliaEditorSupport/julia-vim'
au BufRead,BufNewFile *.jl set filetype=julia

" CRBasic
au BufRead,BufRead *.cr1 set filetype=crbasic

" Tab alignment (helpful for vim-puppet)
Bundle "godlygeek/tabular"

" Fuzzy file search using fzf (installed via Homebrew)
set rtp+=/usr/local/opt/fzf
Bundle "junegunn/fzf.vim"
silent! nnoremap <unique> <silent> <leader>t :Files<CR>

" enable preview with syntax highlighting using highlight (installed via
" Homebrew)
let g:fzf_files_options =
  \ '--preview "(highlight -O ansi -l {} || cat {}) 2> /dev/null | head -'.&lines.'"'


" Tab completion
Bundle "ervandew/supertab"

" Use Git in Vim
Bundle "tpope/vim-fugitive"

" Asynchornous Line Engine (ALE)
Bundle "w0rp/ale"
let &runtimepath.=',~/.vim/bundle/ale'
let g:ale_linters = {'python': ['flake8']}
let g:ale_python_flake8_options = '--ignore E265,E266,E501'

" asynchronous command execution
Bundle "tpope/vim-dispatch"
nnoremap <leader>r :Dispatch<CR>
autocmd FileType python let b:dispatch = 'python %'
autocmd FileType julia let b:dispatch = 'julia %'


"--------------------------------------------------------------
" STATUSLINE
"--------------------------------------------------------------
set laststatus=2

" solarized colors: bg=base03, fg=base00
hi StatusLine ctermbg=0 ctermfg=11 guibg=#002b36 guifg=#657b83

set statusline=%<                       " truncation point
set statusline+=%f                      " file name
set statusline+=\ %y                    " (file type)
set statusline+=%m                      " [+] if modified
set statusline+=%=                      " switch to right side
set statusline+=%-14(%3l,%02c\ 0x%02B%) " line #, column #  hex-value

" required (at end of vimrc)
filetype plugin indent on

" vim: set filetype=vim:
