" --------------------------------------------------------------
" GENERAL SETTINGS
" --------------------------------------------------------------

" UI
set cursorline
set incsearch
set nocompatible
set number
set ruler
syntax on

" GUI specific settings
if has("gui_running")
	set autochdir 		" automattically cd to current file's directory
	set colo=molokai	" color theme
	set gfn=Monaco:h12 	" font
endif

" load the plugin and indent settings for the detected filetype
filetype plugin indent on

" show (partial) command in the status line
set showcmd

" highlight matching parens
set showmatch

" include user's local vim config
if filereadable(expand("~/.vimrc.local"))
  source ~/.vimrc.local
endif

" directories for swp files
set backupdir=~/.vim/backup
set directory=~/.vim/backup



" --------------------------------------------------------------
" TEXT FORMATTING AND LAYOUT
" --------------------------------------------------------------

"set textwidth=0
"set wrapmargin=5 
set encoding=utf-8
set wrap
set tabstop=4
set shiftwidth=4
set softtabstop=4
set expandtab
set list listchars=tab:\ \ ,trail:Â·



" --------------------------------------------------------------
" FOLDING
" --------------------------------------------------------------

set foldmethod=indent   "fold based on indent
set foldnestmax=10      "deepest fold is 10 levels
set nofoldenable        "dont fold by default
set foldlevel=1         "this is just what i use



" --------------------------------------------------------------
" LATEX
" --------------------------------------------------------------

let g:Tex_Flavor='latex'
let g:Tex_ViewRule_pdf='TexShop'
let g:Tex_MultipleCompileFormats='pdf' 											" compile with bibtex
let g:Tex_CompileRule_pdf='pdflatex -synctex=1 --interaction=nonstopmode $*' 	" pdflatex compile nonstopmode
let g:Tex_MakeIndexFlavor = 'makeindex $*.idx' 									" MakeIndex setting

let g:Tex_IgnoredWarnings ='
       \"Underfull\n".
       \"Overfull\n".
       \"specifier changed to\n".
       \"You have requested\n".
       \"Missing number, treated as zero.\n".
       \"There were undefined references\n".
       \"Citation %.%# undefined\n".
       \"\oval, \circle, or \line size unavailable\n"'


" --------------------------------------------------------------
" MACVIM
" --------------------------------------------------------------

" MacVIM shift+arrow-keys behavior (required in .vimrc)
let macvim_hig_shift_movement = 1



" --------------------------------------------------------------
" NERDTREE
" --------------------------------------------------------------

let NERDTreeIgnore=['\.pyc$', '\.rbc$', '\~$']
map <Leader>n :NERDTreeToggle<CR> 



" --------------------------------------------------------------
" OTHER SETTINGS
" --------------------------------------------------------------

" Searching
set hlsearch
set incsearch
set ignorecase
set smartcase


" Tab completion
set wildmode=list:longest,list:full
set wildignore+=*.o,*.obj,.git,*.rbc,*.class,.svn,vendor/gems/*

" Status bar
set laststatus=2

" Without setting this, ZoomWin restores windows in a way that causes
" equalalways behavior to be triggered the next time CommandT is used.
" This is likely a bludgeon to solve some other issue, but it works
set noequalalways

" Command-T configuration
let g:CommandTMaxHeight=20

" ZoomWin configuration
map <Leader><Leader> :ZoomWin<CR>


" CTags
map <Leader>rt :!ctags --extra=+f -R *<CR><CR>
map <C-\> :tnext<CR>


" Remember last location in file
if has("autocmd")
  au BufReadPost * if line("'\"") > 0 && line("'\"") <= line("$")
    \| exe "normal g'\"" | endif
endif


" allow backspacing over everything in insert mode
set backspace=indent,eol,start


" Opens an edit command with the path of the currently edited file filled in
" Normal mode: <Leader>e
map <Leader>e :e <C-R>=expand("%:p:h") . "/" <CR>


" Opens a tab edit command with the path of the currently edited file filled in
" Normal mode: <Leader>t
map <Leader>te :tabe <C-R>=expand("%:p:h") . "/" <CR>


" Inserts the path of the currently edited file into a command
" Command mode: Ctrl+P
cmap <C-P> <C-R>=expand("%:p:h") . "/" <CR>


" Unimpaired configuration
" Bubble single lines
nmap <C-Up> [e
nmap <C-Down> ]e
" Bubble multiple lines
vmap <C-Up> [egv
vmap <C-Down> ]egv


" Enable syntastic syntax checking
let g:syntastic_enable_signs=1
let g:syntastic_quiet_warnings=1


" % to bounce from do to end etc.
runtime! macros/matchit.vim
