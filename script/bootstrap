#!/bin/sh
#
# bootstrap
#
# Install dependencies.

# Inspired bootstrap install scripts from:
#   davidxia's dotfiles (https://github.com/davidxia/bootstrap_dotfiles/)
#   joshdick's dotfiles (https://github.com/joshdick/dotfiles)


# Error (red, underlined)
die () {
  echo "\033[0;31;4mError\033[0m: $1"
  exit 1
}


# echo with blue text
echo_with_color () {
  echo "\033[0;34m$1\033[0m"
}


# check if cmd exists
exists () {
  type "$1" >/dev/null 2>/dev/null
}


install_dotfiles () {
  echo_with_color "\nInstalling dotfiles to $HOME..."    

  # get path of dotfiles repo
  DOTFILES_ROOT="$( cd "$( dirname "$0" )" && cd .. && pwd )"

  # set global default install options
  skip_all=false
  overwrite_all=false
  backup_all=false

  # get list of all dotfiles to be symlinked
  # NOTE: assumes a dotfiles structure of topic/setting.symlink
  #       (e.g. zsh/zshrc.symlink)
  for file in `find $DOTFILES_ROOT -maxdepth 2 -name \*.symlink` ; do

    # get filename of $file (no path)
    symlink_filename=`basename "$file"`

    # create absolute path for link target
    target=`echo "$HOME/.$symlink_filename" | sed "s/\.symlink$//g"`
        
    # set default install options (per symlink file)
    skip=false
    overwrite=false
    backup=false

    # get user input if dotfiles already exist
    if [ -f $target ] || [ -d $target ] ; then
    
      if [ "$overwrite_all" = "false" ] && [ "$backup_all" = "false" ] \
        && [ "$skip_all" = "false" ] ; then 
            
        # get user input 
        echo "File already exists: $target; what do you want to do?" \
              "[s]kip," \
              "[S]kip all," \
              "[o]verwrite," \
              "[O]verwrite all," \
              "[b]ackup," \
              "[B]ackup all?"
        read REPLY
        
        # apply user input 
        case "$REPLY" in
          s) skip=true                             ;; 
          S) skip_all=true                         ;;
          o) overwrite=true                        ;; 
          O) overwrite_all=true                    ;; 
          b) backup=true                           ;; 
          B) backup_all=true                       ;; 
          *) die "unknown option; quitting now..." ;;
        esac
      fi # end if-statement for if no global options are set
            
      # delete pre-existing dotfiles
      if [ "$overwrite" = "true" ] || [ "$overwrite_all" = "true" ] ; then
        echo "Overwriting: $target... "
        rm -rf $target
      fi

      # backup pre-existing dotfiles
      if [ "$backup" = "true" ] || [ "$backup_all" = "true" ] ; then
        echo "Backing up: $target... "
        mv $target $target\.backup
      fi
    
      # linking dotfiles
      if [ "$skip" = "false" ] && [ "$skip_all" = "false" ] ; then
        ln -s $file $target
      else
        echo "Skipping: $target... "
      fi
    
    # link dotfiles if they don't already exist 
    else
      echo "Installing: $target... "
      ln -s $file $target
    fi
        
  done # end loop for all *.symlink files
}


install_unix_pkgs () {
  echo_with_color "\nInstalling UNIX packages..."

  if exists brew ; then

    # update homebrew package list
    brew update >/dev/null 2>/dev/null

    # git 
    brew install git git-extras

    # shells
    brew install --disable-etcdir zsh

    # editors
    brew install macvim --override-system-vim

    # tools
    brew install ack
    brew install coreutils
    brew install z
    
    # languages
    brew install python
    brew install ruby 
  else
    die "Homebrew not installed."
  fi
}



install_python_pkgs () {
  echo_with_color "\nInstalling Python packages..."

  if exists pip ; then

    # update pip package list
    pip install --upgrade distribute
    pip install --upgrade pip

    # virtual environments
    pip install virtualenv
    pip install virtualenvwrapper
  else
    die "Pip not installed."
  fi
}


install_vim_pkgs () {
  echo_with_color "\nInstalling Vim packages..."

  # create vundle directory
  if [ ! -d $HOME/.vim/bundle/vundle/ ] ; then
    mkdir -p $HOME/.vim/bundle/vundle
  fi
    
  # install vundle
  if [ ! -d $HOME/.vim/bundle/vundle/.git/ ] ; then
    echo "Vundle not installed; installing now..."
    git clone http://github.com/gmarik/vundle.git ~/.vim/bundle/vundle
  fi

  # install bundles listed in vimrc
  if exists vim ; then 
    vim +BundleInstall +qall
  elif exists mvim ; then 
    mvim +BundleInstall +qall
  else
    die "Vim not installed."
  fi
}


# OS-agnostic settings
install_dotfiles

# OS-specific settings
if [ $(uname -s) = "Darwin" ] ; then
    install_unix_pkgs
    install_python_pkgs
fi

# install all other dependencies
install_vim_pkgs


exit 0

# vim: autoindent tabstop=2 shiftwidth=2 expandtab softtabstop=2 filetype=sh
