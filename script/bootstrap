#!/bin/sh
#
# bootstrap
#
# Install dependencies.

# Inspired bootstrap install scripts from:
#   davidxia's dotfiles (https://github.com/davidxia/bootstrap_dotfiles/)
#   joshdick's dotfiles (https://github.com/joshdick/dotfiles)


# Error (red, underlined)
die () {
  echo "\033[0;31;4mError\033[0m: $1"
  exit 1
}


# echo with blue text
echo_with_color () {
  echo "\033[0;34m$1\033[0m"
}


# check if cmd exists
exists () {
  type "$1" >/dev/null 2>/dev/null
}


install_dotfiles () {
  echo_with_color "\nInstalling dotfiles to $HOME..."    

  # get path of dotfiles repo
  DOTFILES_ROOT="$( cd "$( dirname "$0" )" && cd .. && pwd )"

  # set global default install options
  skip_all=false
  overwrite_all=false
  backup_all=false

  # get list of all dotfiles to be symlinked
  # NOTE: assumes a dotfiles structure of topic/setting.symlink
  #       (e.g. zsh/zshrc.symlink)
  for file in `find $DOTFILES_ROOT -maxdepth 2 -name \*.symlink` ; do

    # get filename of $file (no path)
    symlink_filename=`basename "$file"`

    # create absolute path for link target
    target=`echo "$HOME/.$symlink_filename" | sed "s/\.symlink$//g"`
        
    # set default install options (per symlink file)
    overwrite=false
    backup=false

    if [ -f $target ] || [ -d $target ] ; then
    
      # get user input if files exist and no global options are set
      if [ "$overwrite_all" = "false" ] && [ "$backup_all" = "false" ] \
        && [ "$skip_all" = "false" ] ; then 
            
        # get user input 
        echo "File already exists: $target; what do you want to do?" \
              "[s]kip," \
              "[S]kip all," \
              "[o]verwrite," \
              "[O]verwrite all," \
              "[b]ackup," \
              "[B]ackup all?"

        read REPLY
                
        case "$REPLY" in
          s)
            echo "Skipping: $target... \n"
            continue
            ;; 
          S)
            echo "Skipping: all..."
            skip_all=true
            ;;
          o)
            echo "Overwriting: $target... \n"
            overwrite=true
            ;; 
          O)
            echo "Overwriting: all..."
            overwrite_all=true
            ;; 
          b)
            echo "Backing up: $target... \n"
            backup=true
            ;; 
          B)
            echo "Backing up: all..."
            backup_all=true
            ;; 
          *)
            die "unknown option; quitting now..."
            exit 1
            ;;
          esac
      fi # end if-statement for if no global options are set
            
      # delete pre-existing files
      if [ "$overwrite" = "true" ] || [ "$overwrite_all" = "true" ] ; then
        rm -rf $target
      fi

      # backup pre-existing files
      if [ "$backup" = "true" ] || [ "$backup_all" = "true" ] ; then
        mv $target $target\.backup
      fi

    fi # end if-statement for pre-existing files
        

    # link files if user didn't select skip all 
    if [ "$skip_all" = "false" ] ; then
      ln -s $file $target
    fi

  done # end loop for all *.symlink files
}


install_homebrew () {
  echo_with_color "\nChecking if homebrew is already installed..."

  if [ -x /usr/local/bin/brew ] ; then
    echo "Homebrew is already installed."
  else
    die "Homebrew not installed."
  fi
}


install_homebrew_pkgs () {
  echo_with_color "\nUpdating homebrew package list..."
  brew update

  echo_with_color "\nInstalling homebrew packages..."

  # git 
  brew install git git-extras

  # shells
  brew install --disable-etcdir zsh

  # editors
  brew install macvim --override-system-vim

  # tools
  brew install ack
  brew install coreutils
  brew install z
    
  # languages
  brew install python
  brew install ruby 
}


install_pip_pkgs () {
  echo_with_color "\nUpdating pip package list..."
  pip install --upgrade distribute
  pip install --upgrade pip

  echo_with_color "\nInstalling pip packages..."
}


install_vundle () {
  echo_with_color "\nChecking if vundle is already installed..."

  # create vundle directory
  if [ ! -d $HOME/.vim/bundle/vundle/ ] ; then
    mkdir -p $HOME/.vim/bundle/vundle
  fi
    
  # install vundle
  if [ ! -d $HOME/.vim/bundle/vundle/.git/ ] ; then
    echo "Vundle not installed. Installing now..."
    git clone http://github.com/gmarik/vundle.git ~/.vim/bundle/vundle
  else
    echo "Vundle is already installed."
  fi
}


install_vundle_pkgs () {
  echo_with_color "\nInstalling vundle packages..."

  if exists mvim ; then 
    mvim +BundleInstall +qall
  elif exists vim ; then 
    vim +BundleInstall +qall
  else
    die "Vim not installed."
  fi
}


# OS-agnostic settings
install_dotfiles

# OS-specific settings
if [ $(uname -s) = "Darwin" ] ; then
    install_homebrew
    install_homebrew_pkgs 
    install_pip_pkgs
fi

# install all other dependencies
install_vundle
install_vundle_pkgs


# vim: autoindent tabstop=2 shiftwidth=2 expandtab softtabstop=2 filetype=sh
